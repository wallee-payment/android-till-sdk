apply plugin: 'com.android.library'
//apply plugin: 'java'
apply plugin: 'maven-publish'

def sdkVersion = "0.9.23"
def currentGitBranch = getCurrentGitBranch()

android {
    compileSdkVersion 29
    buildToolsVersion "29.0.3"

    defaultConfig {
        minSdkVersion 19
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"

        manifestPlaceholders = [sdkVersion: sdkVersion]
        buildConfigField "String", "SDK_VERSION", "\"" + sdkVersion + "\""
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation 'androidx.appcompat:appcompat:1.2.0'
    api 'com.google.code.gson:gson:2.8.6'
    testImplementation 'junit:junit:4.13'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'
}

// Create a new resolvable configuration for Javadoc
configurations {
    javadocCompile {
        extendsFrom implementation
        canBeResolved = true
    }
}

// Task to generate Javadocs
task javadoc(type: Javadoc) {
    failOnError false
    source = android.sourceSets.main.java.srcDirs
    classpath += files(android.getBootClasspath().join(File.pathSeparator)) + configurations.javadocCompile
    options.encoding = 'UTF-8'
    options.charSet = 'UTF-8'
    options.author = true
    options.version = true
    options.links("https://developer.android.com/reference/")
}

// Build a jar with Javadoc
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives javadocJar
}

afterEvaluate {
    println("Current Branch: " + currentGitBranch)
    publishing {
        publications {
            if (currentGitBranch.equalsIgnoreCase("master")) {
                println 'publishing for master'
                /*
                release(MavenPublication) {
                    from components.release
                    groupId 'com.wallee.android.till'
                    artifactId 'sdk'
                    version sdkVersion
                }
                 */
            }
            println 'publishing for dev'
            /*
            dev(MavenPublication) {
                from components.debug
                groupId 'com.wallee.android.till'
                artifactId 'sdk-dev'
                version sdkVersion
            }
            */
        }
        repositories {
            maven {
                url "https://gitlab.com/api/v4/projects/21028526/packages/maven"
                name "GitLab"
                credentials(HttpHeaderCredentials) {
                    name = 'Job-Token'
                    value = System.getenv("CI_JOB_TOKEN")
                }
                authentication {
                    header(HttpHeaderAuthentication)
                }
            }
        }
    }
}

def getCurrentGitBranch() {
    def gitBranch = "Unknown branch"
    try {
        def workingDir = new File("${project.projectDir}")
        def result = 'git rev-parse --abbrev-ref HEAD'.execute(null, workingDir)
        result.waitFor()
        if (result.exitValue() == 0) {
            gitBranch = result.text.trim()
        }
    } catch (e) { }
    return gitBranch
}
